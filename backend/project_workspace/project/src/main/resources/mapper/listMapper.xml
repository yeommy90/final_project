<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.list.dao.ListDAO">
	
	<!--메인 화면 리스트-->
	<select id="getTopRatedMovies" resultType="ListDTO">
		<![CDATA[
		SELECT a.movie_id, a.title, a.release_date, 
			   round(a.tmdb_vote_sum, 2) as tmdb_vote_sum, a.tmdb_vote_cnt, a.poster_path
		FROM (SELECT * 
			  FROM movie 
			  WHERE tmdb_vote_cnt >= 100 AND popularity >= 30 AND release_date >= '00/01/01'
        ORDER BY tmdb_vote_sum DESC) A 
		WHERE rownum <= 20
		]]>
	</select>
	
	<select id="getTopRatedClassic" resultType="ListDTO">
		<![CDATA[
		SELECT a.movie_id, a.title, a.release_date, 
				round(a.tmdb_vote_sum, 2) as tmdb_vote_sum, a.tmdb_vote_cnt, a.poster_path
		FROM (SELECT * 
        		FROM movie
        		WHERE tmdb_vote_cnt >= 100 AND popularity >= 30 AND release_date <= '90/01/01'
        		ORDER BY tmdb_vote_sum DESC) A 
		WHERE rownum <= 20
		]]>
	</select>
	
	<!--getTopRatedClassic
	getTopRatedDirector
	getTopRatedActor
	getTopRatedGenre
	getFavoriteDirector
	getFavoriteActor
	getFavoriteGenre-->
	
	
	
	
	<!--검색-->
	<select id="searchMovies" resultType="ListDTO" parameterType="String">
        SELECT * FROM movie WHERE UPPER(title) LIKE '%' || #{query} || '%' 
	</select>
	
	<select id="searchActors" resultType="ActorDTO" parameterType="String">
        SELECT * FROM actor WHERE UPPER(name) LIKE '%' || #{query} || '%'
	</select>
	
	<select id="searchDirectors" resultType="DirectorDTO" parameterType="String">
        SELECT * FROM director WHERE UPPER(name) LIKE '%' || #{query} || '%'
	</select>
	
	
	
	
	<!--영화 컨텐츠 페이지-->
	<select id="getMovieById" parameterType="int" resultType="ContentsDTO">
		SELECT movie_id, title, release_date, round(tmdb_vote_sum, 2) as tmdb_vote_sum, overview, poster_path, backdrop_path, country, runtime, original_title
		FROM movie WHERE movie_id = #{movie_id}
	</select>
	
	<select id="getGenresByMovieId" parameterType="int" resultType="GenreDTO">
		SELECT *
		FROM movie_genre mg
		JOIN genre g ON mg.genre_id = g.genre_id
		WHERE mg.movie_id = #{movie_id}
	</select>
	
	<select id="getDirectorsByMovieId" parameterType="int" resultType="DirectorDTO">
		SELECT *
		FROM director d
		JOIN movie_director md ON d.director_id = md.director_id
		WHERE md.movie_id = #{movie_id}
	</select>
	
	<select id="getActorsByMovieId" parameterType="int" resultType="ActorDTO">
		SELECT *
		FROM actor a
		join movie_actor ma ON a.actor_id = ma.actor_id
		where ma.movie_id = #{movie_id} AND a.profile_path IS NOT NULL
	</select>
	
	<select id="getImagesByMovieId" parameterType="int" resultType="ImagesDTO">
		SELECT *
		FROM movie m
		join movie_images mi ON m.movie_id = mi.movie_id
		where m.movie_id = #{movie_id}
	</select>
	
	<select id="getReviewsByMovieId"  parameterType="int" resultType="ReviewDTO">
		SELECT * 
		FROM review 
		WHERE movie_id = #{movie_id}
	</select>
	
	<!--사용자가 별점, 코멘트 안남긴 상태에서 코멘트를 추가할 경우-->
	<insert id="postComment" parameterType="CommentDTO">
		insert into review
		values (#{movie_id}, 1, null, #{content, jdbcType=VARCHAR}, 0, sysdate, sysdate, 1)
	</insert>
	
	<!--사용자가 별점만 남긴 상태에서 코멘트를 추가할 경우-->
	<update id="updateComment" parameterType="CommentDTO">
		UPDATE review
		SET content = #{content}
		WHERE movie_id = #{movie_id} AND member_id = #{member_id}
	</update>
	
	<!--사용자가 코멘트를 안남긴 상태에서 별점만 추가할 경우-->
	<insert id="postRating" parameterType="RatingDTO">
		INSERT INTO review
		VALUES (#{movie_id}, 1, #{rating}, null, 0, sysdate, sysdate, 1)
	</insert>
	
	<!--사용자가 별점만 남긴 상태에서 별점만 수정할 경우-->
	<update id="updateRating" parameterType="RatingDTO">
		UPDATE review
		SET rating = #{rating}
		WHERE movie_id = #{movie_id} AND member_id = #{member_id}
	</update>
	
	<!--사용자가 이미 남긴 리뷰가 있는지 확인-->
	<select id="findReviewById" parameterType="map" resultType="ReviewDTO">
		SELECT *
		FROM review
		WHERE movie_id = #{movie_id} AND member_id = #{member_id}
	</select>
</mapper>
















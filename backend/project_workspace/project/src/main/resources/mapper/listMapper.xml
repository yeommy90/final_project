<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.list.dao.ListDAO">
	
	<!--부귀영화 top 20-->
	<select id="getTopRated" resultType="ListDTO">
		<![CDATA[
		SELECT a.movie_id, a.title, a.release_date, 
				round(a.tmdb_vote_sum, 2) as tmdb_vote_sum, a.tmdb_vote_cnt, a.poster_path, a.vote_sum
		FROM (SELECT * 
		        FROM movie
		        ORDER BY vote_sum DESC) A 
		WHERE rownum <= 20
		]]>
	</select>
	
	<!--TMDB 추천 영화-->
	<select id="getTopRatedMovies" resultType="ListDTO">
		<![CDATA[
		SELECT a.movie_id, a.title, a.release_date,
				round(a.tmdb_vote_sum, 2) as tmdb_vote_sum, a.tmdb_vote_cnt, a.poster_path, a.vote_sum
		FROM (
		    SELECT *
		    FROM movie
		    WHERE tmdb_vote_cnt >= 0 AND popularity >= 0
		    ORDER BY 
		        CASE 
		            WHEN tmdb_vote_cnt IS NOT NULL THEN tmdb_vote_cnt
		            WHEN tmdb_vote_sum IS NOT NULL THEN tmdb_vote_sum
		            ELSE popularity 
		        END DESC
		) a
		WHERE rownum <= 20
		]]>
	</select>
	
	<!--최근 개봉작-->
	<select id="getLatestMovies" resultType="ListDTO">
		<![CDATA[
		SELECT a.movie_id, a.title, a.release_date, 
			   round(a.tmdb_vote_sum, 2) as tmdb_vote_sum, a.tmdb_vote_cnt, a.poster_path, a.vote_sum
		FROM (SELECT * 
		        FROM movie
		        WHERE tmdb_vote_cnt >= 1000 AND popularity >= 10
		        ORDER BY release_date DESC) A 
		WHERE rownum <= 20
		]]>
	</select>
	
	<!--부귀영화 추천 테마 : 가정의 달-->
	<select id="getThemeMovies" resultType="ListDTO">
		<![CDATA[
		SELECT a.movie_id, a.title, a.release_date, round(a.tmdb_vote_sum, 2) as tmdb_vote_sum, a.tmdb_vote_cnt, a.poster_path, a.vote_sum
		FROM (
		    SELECT DISTINCT movie.*
		    FROM movie
		    JOIN movie_genre ON movie.movie_id = movie_genre.movie_id
		    JOIN genre ON movie_genre.genre_id = genre.genre_id
		    WHERE tmdb_vote_cnt >= 9000 AND popularity >= 100 AND genre.name IN ('가족') AND genre.name NOT IN ('공포', '스릴러', '범죄')
		    ORDER BY tmdb_vote_cnt DESC
		) a
		WHERE rownum <= 20
		]]>
	</select>
	
	<!--화제의 감독-->
	<select id="getTopRatedDirector" resultType="ListDTO">
		<![CDATA[
		SELECT a.movie_id, a.title, a.release_date, round(a.tmdb_vote_sum, 2) as tmdb_vote_sum, a.tmdb_vote_cnt, a.poster_path, a.vote_sum
		FROM (
		    SELECT DISTINCT movie.*
		    FROM movie
		    JOIN movie_director ON movie.movie_id = movie_director.movie_id
		    JOIN director ON movie_director.director_id = director.director_id
		    WHERE director.name = 'Tim Burton'
		    ORDER BY tmdb_vote_cnt DESC
		) a
		WHERE rownum <= 10
		]]>
	</select>

	<!--화제의 배우-->
	<select id="getTopRatedActor" resultType="ListDTO">
		<![CDATA[
		SELECT a.movie_id, a.title, a.release_date, round(a.tmdb_vote_sum, 2) as tmdb_vote_sum, a.tmdb_vote_cnt, a.poster_path, a.vote_sum
		FROM (
		    SELECT DISTINCT movie.*
		    FROM movie
		    JOIN movie_actor ON movie.movie_id = movie_actor.movie_id
		    JOIN actor ON movie_actor.actor_id = actor.actor_id
		    WHERE actor.name = 'Timothée Chalamet'
		    ORDER BY tmdb_vote_cnt DESC
		) a
		WHERE rownum <= 10
		]]>
	</select>
	
	<!--사용자 선호 장르-->
	<select id="getFavoriteGenre" parameterType="int" resultType="ListDTO">
		<![CDATA[
		SELECT m.movie_id, m.title, m.release_date, round(m.tmdb_vote_sum, 2) as tmdb_vote_sum, m.tmdb_vote_cnt, m.poster_path, m.vote_sum
		FROM (
		    SELECT DISTINCT m.*
		    FROM movie m
		    JOIN movie_genre mg ON m.movie_id = mg.movie_id
		    WHERE mg.genre_id IN (
		        SELECT genre_id
		        FROM member_genre
		        WHERE member_id = #{member_id}
		    )
		    ORDER BY m.tmdb_vote_cnt DESC
		) m
		WHERE ROWNUM <= 20
		]]>
	</select>
	
	<!--사용자 선호 감독-->
	<select id="getFavoriteDirector">
		<![CDATA[
		]]>
	</select>
	
	<!--사용자 선호 배우-->
	<select id="getFavoriteActor">
		<![CDATA[
		]]>
	</select>
	
	
	
	
	<!--검색-->
	<select id="searchMovies" resultType="ListDTO" parameterType="String">
        SELECT * FROM movie WHERE UPPER(title) LIKE '%' || #{query} || '%' 
	</select>
	
	<select id="searchActors" resultType="ActorDTO" parameterType="String">
        SELECT * FROM actor WHERE UPPER(name) LIKE '%' || #{query} || '%'
	</select>
	
	<select id="searchDirectors" resultType="DirectorDTO" parameterType="String">
        SELECT * FROM director WHERE UPPER(name) LIKE '%' || #{query} || '%'
	</select>
	
	
	
	<!--검색 자동완성 기능을 위한 모든 선택-->
	<select id="selectAll" resultType="java.lang.String">
		(SELECT ACTOR.NAME FROM ACTOR)
		UNION
		(SELECT DIRECTOR.NAME FROM DIRECTOR)
		UNION
		(SELECT MOVIE.TITLE FROM MOVIE)
	</select>
	
	<!--배우 ID로 ACTOR row 선택(이미지, 이름, ID)-->
	<select id ="selectByActorId" resultType="ActorDTO" parameterType="String">
		SELECT * FROM ACTOR
		WHERE ACTOR.ACTOR_ID IN (
		SELECT ACTOR_ID
		FROM MOVIE_ACTOR
		WHERE ACTOR_ID = #{actor_id}
		)
	</select>
	
	<!--감독 ID로 DIRECTOR row 선택(이미지, 이름, ID)-->
	<select id ="selectByDirId" resultType="DirectorDTO" parameterType="String">
		SELECT * FROM DIRECTOR
		WHERE DIRECTOR.DIRECTOR_ID IN (
		SELECT DIRECTOR_ID
		FROM MOVIE_DIRECTOR
		WHERE DIRECTOR_ID = #{dir_id}
		)
	</select>
	
	<!--배우가 출연한 영화 출력(배우ID값으로 선택)-->
	<select id="castMovies" resultType="ListDTO" parameterType="String">
		SELECT DISTINCT MOVIE.*
		FROM MOVIE
		INNER JOIN MOVIE_ACTOR ON MOVIE.MOVIE_ID = MOVIE_ACTOR.MOVIE_ID
		INNER JOIN ACTOR ON MOVIE_ACTOR.ACTOR_ID = ACTOR.ACTOR_ID
		WHERE ACTOR.ACTOR_ID = #{actor_id}
		ORDER BY release_date DESC
	</select>
	
	<!--감독이 감독한 영화 출력(감독ID값으로 선택)-->
	<select id="dirMovies" resultType="ListDTO" parameterType="String">
		SELECT DISTINCT MOVIE.*
		FROM MOVIE
		INNER JOIN MOVIE_DIRECTOR ON MOVIE.MOVIE_ID = MOVIE_DIRECTOR.MOVIE_ID
		INNER JOIN DIRECTOR ON MOVIE_DIRECTOR.DIRECTOR_ID = DIRECTOR.DIRECTOR_ID
		WHERE DIRECTOR.DIRECTOR_ID = #{dir_id}
		ORDER BY release_date DESC
	</select>
	
	
	
	<!--아이디로 영화 선택-->
	<select id = "selectById" resultType="RecommendDTO" parameterType="int">
		SELECT * FROM MOVIE WHERE MOVIE_ID = #{movie_id}
	</select>
	
	<!--가장 최근에 남긴 후기의 영화 정보 가져오기-->
	<select id="selectLastSeen" resultType="ContentsDTO" parameterType="int">
		SELECT *
		FROM (
		    SELECT m.*, r2.REGDATE
		    FROM MOVIE m
		    INNER JOIN (
		        SELECT MOVIE_ID, MAX(REGDATE) AS latest_review_date
		        FROM comments
		        WHERE MEMBER_ID = #{member_id}
		        GROUP BY MOVIE_ID
		    ) r ON m.MOVIE_ID = r.MOVIE_ID
		    INNER JOIN comments r2 ON r.MOVIE_ID = r2.MOVIE_ID AND r.latest_review_date = r2.REGDATE
		    WHERE r2.MEMBER_ID = #{member_id}
		    ORDER BY r.latest_review_date DESC
		)
		WHERE ROWNUM = 1
	</select>
	
	
	<!--추천 영화 정보-->
	<!--리뷰를 남기지 않은 영화 영화만 row 선택. 리뷰를 남긴 영화면 선택하기-->
	<select id="movieRec" parameterType="map" resultType="RecommendDTO" >
		SELECT *
			FROM movie m
			WHERE NOT EXISTS (
			  SELECT *
			  FROM comments r
			  WHERE r.movie_id = m.movie_id
			    AND r.state IN (1, 2, 3, 4)
                AND r.member_id = #{member_id}
			)
			AND m.movie_id = #{movie_id}
	</select>
	
	
	
	<!--영화 컨텐츠 페이지-->
	<select id="getMovieById" parameterType="int" resultType="ContentsDTO">
		SELECT movie_id, title, release_date, round(tmdb_vote_sum, 2) as tmdb_vote_sum, overview, poster_path, backdrop_path, country, runtime, original_title
		FROM movie WHERE movie_id = #{movie_id}
	</select>
	
	<select id="getGenresByMovieId" parameterType="int" resultType="GenreDTO">
		SELECT *
		FROM movie_genre mg
		JOIN genre g ON mg.genre_id = g.genre_id
		WHERE mg.movie_id = #{movie_id}
	</select>
	
	<select id="getDirectorsByMovieId" parameterType="int" resultType="DirectorDTO">
		SELECT *
		FROM director d
		JOIN movie_director md ON d.director_id = md.director_id
		WHERE md.movie_id = #{movie_id}
	</select>
	
	<select id="getActorsByMovieId" parameterType="int" resultType="ActorDTO">
		SELECT *
		FROM actor a
		join movie_actor ma ON a.actor_id = ma.actor_id
		where ma.movie_id = #{movie_id} AND a.profile_path IS NOT NULL
	</select>
	
	<select id="getImagesByMovieId" parameterType="int" resultType="ImagesDTO">
		SELECT *
		FROM movie m
		join movie_images mi ON m.movie_id = mi.movie_id
		where m.movie_id = #{movie_id}
	</select>
	
	<!--영화 아이디로 트레일러 가져오기-->	
	<select id="getTrailerByMovieId" parameterType="int" resultType="String">
		SELECT trailerPath
		FROM movie_trailer
		where movie_id = #{movie_id}
	</select>
	
	<resultMap id="CommentAndRatingResultMap" type="ReviewDTO">
		<result property="movie_id" column="movie_id"/>
		<result property="member_id" column="member_id"/>
		<result property="content" column="content"/>
		<result property="rating" column="rating"/>
		<result property="likes" column="likes"/>
		<result property="regdate" column="regdate"/>
		<result property="state" column="state"/>
		<result property="nickname" column="nickname"/>
		<result property="profile_path" column="profile_path"/>
	</resultMap>
	
	<!--영화 하나에 현재까지 작성된 코멘트-->
	<select id="getReviewsByMovieId"  parameterType="int" resultMap="CommentAndRatingResultMap">
		SELECT c.movie_id, c.member_id, c.content, COALESCE(r.rating, 0) AS rating, c.likes, c.state, c.regdate, m.nickname, m.profile_path
		FROM comments c
		LEFT OUTER JOIN rating r ON r.movie_id = c.movie_id AND r.member_id = c.member_id
		JOIN member m ON m.member_id = c.member_id
		WHERE c.movie_id = #{movie_id}
		ORDER BY likes DESC
	</select>
	
	<!--사용자가 별점, 코멘트 안남긴 상태에서 코멘트를 추가할 경우-->
	<insert id="postComment" parameterType="CommentsDTO">
		insert into comments
		values (#{movie_id}, #{member_id}, #{content, jdbcType=VARCHAR}, 0, sysdate, sysdate, #{state})
	</insert>
	
	<!--사용자가 별점만 남긴 상태에서 코멘트를 추가할 경우-->
	<update id="updateComment" parameterType="CommentsDTO">
		UPDATE comments
		SET content = #{content}, state = #{state}, moddate = sysdate
		WHERE movie_id = #{movie_id} AND member_id = #{member_id}
	</update>
	
	<!--코멘트 삭제-->
	<delete id="deleteComment" parameterType="map">
		DELETE FROM comments
		WHERE movie_id = #{movie_id} AND member_id = #{member_id}
	</delete>
	
	<!--사용자가 코멘트를 안남긴 상태에서 별점만 추가할 경우-->
	<insert id="postRating" parameterType="RatingDTO">
		INSERT INTO rating
		VALUES (#{movie_id}, #{member_id}, #{rating}, sysdate)
	</insert>
	
	<!--사용자가 별점만 남긴 상태에서 별점만 수정할 경우-->
	<update id="updateRating" parameterType="RatingDTO">
		UPDATE rating
		SET rating = #{rating}
		WHERE movie_id = #{movie_id} AND member_id = #{member_id}
	</update>
	
	<delete id="deleteRating" parameterType="map">
		DELETE FROM rating
		WHERE movie_id = #{movie_id} AND member_id = #{member_id}
	</delete>
	
	<!--사용자가 이미 남긴 리뷰가 있는지 확인-->
	<select id="findReviewById" parameterType="map" resultMap="CommentAndRatingResultMap">	
		SELECT COALESCE(c.movie_id, r.movie_id) AS movie_id,
		       	COALESCE(c.member_id, r.member_id) AS member_id,
		       	c.content,
		       	COALESCE(r.rating, 0) AS rating,
		       	c.likes,
		       	c.state,
		       	c.regdate
		FROM rating r
		FULL OUTER JOIN comments c ON c.movie_id = r.movie_id AND c.member_id = r.member_id
		WHERE (c.movie_id = #{movie_id} AND c.member_id = #{member_id}) OR (r.movie_id = #{movie_id} AND r.member_id = #{member_id})
	</select>
	
	
	
	
	<!--영화 테이블 별점 업데이트-->
	<select id="calculateRating" parameterType="int" resultType="map">
		select count(rating) as vote_cnt, round(avg(rating),2) as vote_sum from rating where movie_id = #{movie_id}
	</select>
	
	<update id="updateMovieRating" parameterType="ListDTO">
		update movie
		set vote_sum = #{vote_sum}, vote_cnt = #{vote_cnt}
		where movie_id = #{movie_id}
	</update>
	
	
	
	
	<!--보고싶어요 체크 유무-->
	<select id="findWishById" parameterType="map" resultType="WishDTO">
		SELECT * 
		FROM wish 
		WHERE movie_id = #{movie_id} AND member_id = #{member_id}
	</select>
	
	<insert id="postWish" parameterType="WishDTO">
		INSERT INTO wish
		VALUES (#{member_id}, #{movie_id}, CURRENT_TIMESTAMP)
	</insert>
	
	<delete id="deleteWish" parameterType="map">
		DELETE FROM wish
		WHERE movie_id = #{movie_id} AND member_id = #{member_id}
	</delete>
	
	
	
	<!--인생영화 체크-->
	<select id="findFavoriteById" parameterType="int" resultType="ContentsDTO">
		select * 
		from movie 
		where movie_id in (select favorite from member where member_id = 1)
	</select>
	
	<update id="deleteFavorite" parameterType="int">
		update member
		set favorite = 0
		where member_id = #{member_id}
	</update>
	
	<update id="postFavorite" parameterType="map">
		update member
		set favorite = #{movie_id}
		where member_id = #{member_id}
	</update>
	
	
	
	<!--코멘트 좋아요-->
	<select id="findLikesById" parameterType="map" resultType="LikesDTO">
		SELECT *
		FROM likes
		WHERE movie_id = #{movie_id} AND member_id = #{member_id}
	</select>
	
	<insert id="postLikes" parameterType="LikesDTO">
		INSERT INTO likes
		VALUES (#{member_id}, #{movie_id}, #{comment_member_id})
	</insert>
	
	<!--comments table likes 필드 업데이트-->
	<update id="incrementLikesById" parameterType="CommentsDTO">
	    UPDATE comments
	    SET likes = likes + 1
	    WHERE movie_id = #{movie_id} AND member_id = #{member_id}
	</update>

	<!--member table likes_count 필드 업데이트-->
	<update id="incrementLikesCountById" parameterType="int">
	    UPDATE member
	    SET likes_count = likes_count + 1
	    WHERE member_id = #{member_id}
	</update>
	
	<delete id="deleteLikes" parameterType="LikesDTO">
		DELETE FROM likes
		WHERE movie_id = #{movie_id} AND member_id = #{member_id} AND comment_member_id = #{comment_member_id}
	</delete>
	
	<!--member table likes_count 필드 업데이트-->
	<update id="decrementLikesById" parameterType="CommentsDTO">
	    UPDATE comments
	    SET likes = likes - 1
	    WHERE movie_id = #{movie_id} AND member_id = #{member_id}
	</update>
	
	<!--member table grade 필드 업데이트-->
	<update id="decrementLikesCountById" parameterType="int">
	    UPDATE member
	    SET likes_count = likes_count - 1
	    WHERE member_id = #{member_id}
	</update>
	
	<!--member table grade 필드 업데이트-->
	<update id="updateGradeById" parameterType="memberDTO">
	    UPDATE member
	    SET grade = #{grade}
	    WHERE member_id = #{member_id}
	</update>
	
	<select id="findMemberById" parameterType="int" resultType="memberDTO">
		SELECT *
		FROM member
		WHERE member_id = #{member_id}
	</select>
	
	
	
	<!--코멘트 신고 > 스포일러 4-->
	<update id="commentSpoilerReport" parameterType="ReviewInfoDTO">
		UPDATE comments
		SET STATE = 4
		WHERE MOVIE_ID = #{movie_id} AND MEMBER_ID = #{member_id}
	</update>
	
	<!--코멘트 신고 > 욕설 3-->
	<update id="commentProfanityReport" parameterType="ReviewInfoDTO">
		UPDATE comments
		SET STATE = 3
		WHERE MOVIE_ID = #{movie_id} AND MEMBER_ID = #{member_id}
	</update>
	
	<!--이미 신고되었는지 확인-->
	<select id="checkReported" parameterType="map" resultType="CommentsDTO">
		SELECT *
		FROM comments
		WHERE (movie_id = #{movie_id} AND member_id = #{member_id}) AND (state IN (2, 3, 4))
	</select>
	
	
	
	<!--비슷한 영화 리스트-->
	<select id="getSimilarMovies" parameterType="int" resultType="ListDTO">
		<![CDATA[
		WITH matched_genres AS (
		  SELECT movie_id, COUNT(*) AS genre_count
		  FROM movie_genre
		  WHERE genre_id IN (
		    SELECT genre_id
		    FROM movie_genre
		    WHERE movie_id = #{movie_id}
		  )
		  AND movie_id <> #{movie_id}
		  GROUP BY movie_id
		),
		matched_directors AS (
		  SELECT movie_id, COUNT(*) AS director_count
		  FROM movie_director
		  WHERE director_id IN (
		    SELECT director_id
		    FROM movie_director
		    WHERE movie_id = #{movie_id}
		  )
		  AND movie_id <> #{movie_id}
		  GROUP BY movie_id
		),
		matched_actors AS (
		  SELECT movie_id, COUNT(*) AS actor_count
		  FROM movie_actor
		  WHERE actor_id IN (
		    SELECT actor_id
		    FROM movie_actor
		    WHERE movie_id = #{movie_id}
		  )
		  AND movie_id <> #{movie_id}
		  GROUP BY movie_id
		),
		combined AS (
		  SELECT m.*, COALESCE(g.genre_count, 0) + (3 * COALESCE(d.director_count, 0)) + COALESCE(a.actor_count, 0) AS similarity_score
		  FROM movie m
		  LEFT JOIN matched_genres g ON m.movie_id = g.movie_id
		  LEFT JOIN matched_directors d ON m.movie_id = d.movie_id
		  LEFT JOIN matched_actors a ON m.movie_id = a.movie_id
		  WHERE m.movie_id <> #{movie_id}
		  ORDER BY similarity_score DESC, m.release_date DESC
		)
		SELECT *
		FROM combined
		WHERE ROWNUM <= 10
		]]>
	</select>
</mapper>
















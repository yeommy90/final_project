<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.member.dao.MemberDAO">
	<!--회원가입-->
	<insert id="insertMember" parameterType="MemberDTO">
		<![CDATA[
		INSERT INTO member(member_id, email, password, name, age, gender, visibility, grade, regdate, nickname, likes_count, profile_path, favorite, type)
		VALUES (member_id_seq.nextval, #{email}, #{password}, #{name}, #{age}, #{gender}, #{visibility}, 4, sysdate, '아무개', 0, 'defaultImage.jpg', 0, '일반')
		]]>
	</insert>
	
	<!--아이디로 member 선택-->
	<select id="selectById" parameterType="int" resultType="MemberDTO">
	  	SELECT m.member_id, m.email, m.name, m.nickname, m.profile_path, m.likes_count, m.regdate, m.visibility, m.grade, m.favorite, COUNT(r.member_id) as rating_count
		FROM member m
		LEFT JOIN rating r ON m.member_id = r.member_id
		WHERE m.member_id = #{member_id}
		GROUP BY m.member_id, m.email, m.name, m.nickname, m.profile_path, m.likes_count, m.regdate, m.visibility, m.grade, m.favorite
	</select>
	
	<!--이메일 유효성 검사-->
	<select id="selectByEmail" parameterType="string" resultType="MemberDTO">
	  	SELECT * FROM member
	  	WHERE email = #{email}
	</select>

	
	<!--회원정보 수정 > 이름, 비번, 닉네임, 프로필 이미지-->
	<update id="updateMember" parameterType="MemberDTO">
	  	UPDATE member
	  	SET password=#{password}, name=#{name}, nickname=#{nickname}, visibility=#{visibility}
	  	WHERE email=#{email}
	</update>
	
	<!--회원정보 변경(삭제)-->
	<update id="deleteMember" parameterType="MemberDTO">
	  	UPDATE member
	  	SET password=null, name=null, nickname='존재하지 않는 회원입니다', email=null 
	  	WHERE member_id=#{member_id}
	</update> 
	
	<!-- 비밀번호 변경 -->
	<update id="updateByPass" parameterType="MemberDTO">
		UPDATE member
		SET password=#{password}
		WHERE email=#{email}
	</update>
	
	<!-- 회원 정보 수정 (비밀번호, 이름, 닉네임) -->
	<update id="updateProfileImg" parameterType="MemberDTO">
		UPDATE member
		SET profile_path=#{profile_path}
		WHERE email=#{email}
	</update>
	
	<select id="getProfileImg" resultType="String" parameterType="int">
		SELECT PROFILE_PATH
		FROM MEMBER
		WHERE MEMBER_ID = #{member_id}
	</select>
	
	<select id="idcheck" parameterType="String" resultType="int">
		select count(*) from member
		where email=#{email}
	</select>
	
	<!--마이페이지 위시리스트-->
	<select id="getWishList"  parameterType="int" resultType="ListDTO">
		SELECT a.movie_id, a.title, a.release_date, a.vote_sum,
		round(a.tmdb_vote_sum / 2, 2) as tmdb_vote_sum, a.poster_path, w.regdate
		FROM movie a
		JOIN wish w on a.movie_id = w.movie_id
		WHERE w.member_id = #{member_id}
		order by w.regdate DESC
	</select>

	<!--마이페이지 평가리스트-->
	<select id="getRatingList" parameterType="int" resultType="ListDTO">
		SELECT a.movie_id, a.title, a.release_date, a.vote_sum,
		round(a.tmdb_vote_sum / 2, 2) as tmdb_vote_sum, a.poster_path, r.regdate
		FROM movie a
		JOIN rating r on a.movie_id = r.movie_id
		WHERE r.member_id = #{member_id}
		order by R.regdate DESC
	</select>


	
	
	<!--선택 장르 삽입 시, 기존 장르 삭제하기 -->
	<delete id="deleteMemGenre" parameterType="int">
		DELETE FROM member_genre WHERE member_id=#{member_id}
	</delete>

	<!--회원가입 장르 삽입-->
	<insert id="insertMemGenre" parameterType="MemberGenreDTO">
		INSERT INTO member_genre(member_id, genre_id)
		VALUES(#{memberId},#{genreId})
	</insert>

	<!--장르 수정(선택) 페이지, 장르 불러오기-->
	<select id="selectMemGenre" parameterType="int" resultType="int">
		SELECT genre_id
		FROM member_genre
		WHERE member_id = #{member_id}
	</select>
	
</mapper>